(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["problem"],{2990:function(t,e,n){},"441d":function(t,e,n){"use strict";n.r(e);var r=n("7a23"),a=Object(r["withScopeId"])("data-v-54cede3c");Object(r["pushScopeId"])("data-v-54cede3c");var c={class:"problem"};Object(r["popScopeId"])();var o=a((function(t,e,n,a,o,i){var s=Object(r["resolveComponent"])("base-problem");return Object(r["openBlock"])(),Object(r["createBlock"])("div",c,[Object(r["createVNode"])(s,{pid:o.id,title:o.title,content:o.content},null,8,["pid","title","content"])])}));function i(t,e,n,a,c,o){return Object(r["openBlock"])(),Object(r["createBlock"])("div",null,[Object(r["createVNode"])("h2",null,"P"+Object(r["toDisplayString"])(n.pid)+" "+Object(r["toDisplayString"])(n.title),1),Object(r["createVNode"])("p",null,Object(r["toDisplayString"])(n.content),1)])}n("a9e3");var s={name:"BaseProblem",props:{pid:Number,title:String,content:String}};s.render=i;var u=s,f=n("a544"),p={name:"ProblemPage",data:function(){return{title:"",content:"",id:0}},activated:function(){var t=this,e=this,n=parseInt(e.$route.params.id);this.id=n,Object(f["b"])({pid:n}).handle({200:function(e){t.title=e[0].title,t.content=e[0].content},404:function(){return e.$message.error("获取题目数据失败！")}})},methods:{handleChange:function(t){console.log(t)}},components:{BaseProblem:u}};n("bb14");p.render=o,p.__scopeId="data-v-54cede3c";e["default"]=p},5899:function(t,e){t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},"58a8":function(t,e,n){var r=n("1d80"),a=n("5899"),c="["+a+"]",o=RegExp("^"+c+c+"*"),i=RegExp(c+c+"*$"),s=function(t){return function(e){var n=String(r(e));return 1&t&&(n=n.replace(o,"")),2&t&&(n=n.replace(i,"")),n}};t.exports={start:s(1),end:s(2),trim:s(3)}},7156:function(t,e,n){var r=n("861d"),a=n("d2bb");t.exports=function(t,e,n){var c,o;return a&&"function"==typeof(c=e.constructor)&&c!==n&&r(o=c.prototype)&&o!==n.prototype&&a(t,o),t}},"8bd6":function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}n.d(e,"a",(function(){return a}));var a=function t(e){var n=this;r(this,t),this.handle=function(t){try{n.res.then((function(e){var n=e.status,r=e.headers,a=e.data;a.data?t[n](a.data,r):t[n](a,r)})).catch((function(e){if(e.response)try{t[e.response.status]()}catch(n){t[404]()}else t[404]()}))}catch(e){t[404]()}},this.res=e}},a544:function(t,e,n){"use strict";n.d(e,"c",(function(){return o})),n.d(e,"b",(function(){return i})),n.d(e,"a",(function(){return s}));var r=n("bc3a"),a=n.n(r),c=n("8bd6");function o(t){return new c["a"](a.a.get("/problems",{params:t}))}function i(t){return new c["a"](a.a.get("/problems",{params:t}))}function s(t){return new c["a"](a.a.post("/problems",t))}},a9e3:function(t,e,n){"use strict";var r=n("83ab"),a=n("da84"),c=n("94ca"),o=n("6eeb"),i=n("5135"),s=n("c6b6"),u=n("7156"),f=n("c04e"),p=n("d039"),l=n("7c73"),d=n("241c").f,b=n("06cf").f,h=n("9bf2").f,v=n("58a8").trim,g="Number",I=a[g],m=I.prototype,N=s(l(m))==g,O=function(t){var e,n,r,a,c,o,i,s,u=f(t,!1);if("string"==typeof u&&u.length>2)if(u=v(u),e=u.charCodeAt(0),43===e||45===e){if(n=u.charCodeAt(2),88===n||120===n)return NaN}else if(48===e){switch(u.charCodeAt(1)){case 66:case 98:r=2,a=49;break;case 79:case 111:r=8,a=55;break;default:return+u}for(c=u.slice(2),o=c.length,i=0;i<o;i++)if(s=c.charCodeAt(i),s<48||s>a)return NaN;return parseInt(c,r)}return+u};if(c(g,!I(" 0o1")||!I("0b1")||I("+0x1"))){for(var j,E=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof E&&(N?p((function(){m.valueOf.call(n)})):s(n)!=g)?u(new I(O(e)),n,E):O(e)},S=r?d(I):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,fromString,range".split(","),w=0;S.length>w;w++)i(I,j=S[w])&&!i(E,j)&&h(E,j,b(I,j));E.prototype=m,m.constructor=E,o(a,g,E)}},bb14:function(t,e,n){"use strict";n("2990")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,